"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@salesforce/command");
// Initialize Messages with the current plugin directory
command_1.core.Messages.importMessagesDirectory(__dirname);
// Load the specific messages for this file. Messages from @salesforce/command, @salesforce/core,
// or any library that is using the messages framework can also be loaded this way.
const messages = command_1.core.Messages.loadMessages('sfdx-object-export', 'org');
class accounts extends command_1.SfdxCommand {
    //Must implement method - run as per contact from SfdxCommand interface
    async run() {
        const msg = this.flags.msg || 'Best time of year is Dreamforce';
        const conn = this.org.getConnection();
        const query = 'Select Id, Name From Account';
        const result = await conn.query(query);
        if (!result.records || result.records.length <= 0) {
            throw new command_1.core.SfdxError(messages.getMessage('errorNoOrgResults', [this.org.getOrgId()]));
        }
        this.ux.log('Id                 -  Account Name');
        result.records.forEach(element => {
            this.ux.log(element.Id + '    ' + element.Name);
        });
        //print below if --json flag is used 
        return { orgId: this.org.getOrgId(), "Dreamforce": "Best time of Year" };
    }
}
accounts.description = messages.getMessage('commandDescription');
accounts.examples = [
    `Sample example to run command goes here`,
    `Other example goes here`,
    `This demo takes flag -m , to echo message`,
    `Example : sfdx DF:18:helpdemo -u <USERALIAS> -m <Your Message>`
];
// Comment this out if your command does not require an org username
accounts.requiresUsername = true;
// Comment this out if your command does not support a hub org username
accounts.supportsDevhubUsername = true;
// Set this to true if your command requires a project workspace; 'requiresProject' is false by default
accounts.requiresProject = false;
accounts.flagsConfig = {
    // flag with a value (-n, --name=VALUE)
    msg: command_1.flags.string({ char: 'm', description: messages.getMessage('msgFlagDescription') }),
    force: command_1.flags.boolean({ char: 'f', description: messages.getMessage('forceFlagDescription') })
};
exports.default = accounts;
//# sourceMappingURL=accounts.js.map